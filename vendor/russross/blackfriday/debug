block.go:		// ``` go info string here
block.go:		// ```
block.go:// isFenceLine checks if there's a fence line (e.g., ``` or ``` go) at the beginning of data,
block.go:	// check for the marker characters: ~ or `
block.go:	if data[i] != '~' && data[i] != '`' {
block_test.go:		`* Foo
block_test.go:`,
block_test.go:		`<ul>
block_test.go:`,
block_test.go:		"* Foo\n\n    ```\n    bar\n\n    qux\n    ```\n",
block_test.go:		`<ul>
block_test.go:`,
block_test.go:		`1. Foo
block_test.go:`,
block_test.go:		`<ol>
block_test.go:`,
block_test.go:		"``` go\nfunc foo() bool {\n\treturn true;\n}\n```\n",
block_test.go:		"``` go foo bar\nfunc foo() bool {\n\treturn true;\n}\n```\n",
block_test.go:		"``` c\n/* special & char < > \" escaping */\n```\n",
block_test.go:		"``` c\nno *inline* processing ~~of text~~\n```\n",
block_test.go:		"```\nNo language\n```\n",
block_test.go:		"``` {ocaml}\nlanguage in braces\n```\n",
block_test.go:		"```    {ocaml}      \nwith extra whitespace\n```\n",
block_test.go:		"```{   ocaml   }\nwith extra whitespace\n```\n",
block_test.go:		"```` python\nextra\n````\n",
block_test.go:		"``` lisp\nno ending\n",
block_test.go:		"<p>``` lisp\nno ending</p>\n",
block_test.go:		"```\nmismatched begin and end\n~~~\n",
block_test.go:		"<p>```\nmismatched begin and end\n~~~</p>\n",
block_test.go:		"~~~\nmismatched begin and end\n```\n",
block_test.go:		"<p>~~~\nmismatched begin and end\n```</p>\n",
block_test.go:		"   ``` oz\nleading spaces\n```\n",
block_test.go:		"  ``` oz\nleading spaces\n ```\n",
block_test.go:		" ``` oz\nleading spaces\n  ```\n",
block_test.go:		"``` oz\nleading spaces\n   ```\n",
block_test.go:		"    ``` oz\nleading spaces\n    ```\n",
block_test.go:		"<pre><code>``` oz\n</code></pre>\n\n<p>leading spaces\n    ```</p>\n",
block_test.go:		"Bla bla\n\n``` oz\ncode blocks breakup paragraphs\n```\n\nBla Bla\n",
block_test.go:		"Some text before a fenced code block\n``` oz\ncode blocks breakup paragraphs\n```\nAnd some text after a fenced code block",
block_test.go:		"`",
block_test.go:		"<p>`</p>\n",
block_test.go:		"Bla bla\n\n``` oz\ncode blocks breakup paragraphs\n```\n\nBla Bla\n\n``` oz\nmultiple code blocks work okay\n```\n\nBla Bla\n",
block_test.go:		"Some text before a fenced code block\n``` oz\ncode blocks breakup paragraphs\n```\nSome text in between\n``` oz\nmultiple code blocks work okay\n```\nAnd some text after a fenced code block",
block_test.go:		"```\n[]:()\n```\n",
block_test.go:		"```\n[]:()\n[]:)\n[]:(\n[]:x\n[]:testing\n[:testing\n\n[]:\nlinebreak\n[]()\n\n[]:\n[]()\n```",
block_test.go:		cat("> ```go",
block_test.go:			"```",
block_test.go:		`<blockquote>
block_test.go:`,
block_test.go:			"> ```go",
block_test.go:			"```",
block_test.go:		`<blockquote>
block_test.go:`,
block_test.go:			"```",
block_test.go:		`<blockquote>
block_test.go:` + "```" + `</p>
block_test.go:`,
block_test.go:			"> ```go",
block_test.go:			"```",
block_test.go:			"> ```go",
block_test.go:			"```",
block_test.go:		`<blockquote>
block_test.go:`,
block_test.go:			"> ```fenced",
block_test.go:			"```",
block_test.go:			"> ```fenced",
block_test.go:			"> ```",
block_test.go:	want := `<blockquote>
block_test.go:`
block_test.go:		"``` go\nfunc foo() bool {\n\treturn true;\n}\n```\n",
block_test.go:		"``` go foo bar\nfunc foo() bool {\n\treturn true;\n}\n```\n",
block_test.go:		"``` c\n/* special & char < > \" escaping */\n```\n",
block_test.go:		"``` c\nno *inline* processing ~~of text~~\n```\n",
block_test.go:		"```\nNo language\n```\n",
block_test.go:		"``` {ocaml}\nlanguage in braces\n```\n",
block_test.go:		"```    {ocaml}      \nwith extra whitespace\n```\n",
block_test.go:		"```{   ocaml   }\nwith extra whitespace\n```\n",
block_test.go:		"```` python\nextra\n````\n",
block_test.go:		"``` lisp\nno ending\n",
block_test.go:		"<p>``` lisp\nno ending</p>\n",
block_test.go:		"```\nmismatched begin and end\n~~~\n",
block_test.go:		"<p>```\nmismatched begin and end\n~~~</p>\n",
block_test.go:		"~~~\nmismatched begin and end\n```\n",
block_test.go:		"<p>~~~\nmismatched begin and end\n```</p>\n",
block_test.go:		"   ``` oz\nleading spaces\n```\n",
block_test.go:		"  ``` oz\nleading spaces\n ```\n",
block_test.go:		" ``` oz\nleading spaces\n  ```\n",
block_test.go:		"``` oz\nleading spaces\n   ```\n",
block_test.go:		"    ``` oz\nleading spaces\n    ```\n",
block_test.go:		"<pre><code>``` oz\n</code></pre>\n\n<p>leading spaces</p>\n\n<pre><code>```\n</code></pre>\n",
block_test.go:		"``` html\n<![CDATA[foo]]>\n```\n",
block_test.go:		"<![CDATA[\n``` python\ndef func():\n    pass\n```\n]]>\n",
block_test.go:		"<![CDATA[\n``` python\ndef func():\n    pass\n```\n]]>\n",
block_test.go:		`<![CDATA[
block_test.go:`,
block_test.go:		`<![CDATA[
block_test.go:`,
block_test.go:			data:    []byte("```"),
block_test.go:			data:       []byte("```\nstuff here\n"),
block_test.go:			wantMarker: "```",
block_test.go:			data:          []byte("```\nstuff here\n"),
block_test.go:			wantMarker:    "```",
block_test.go:			data:    []byte("stuff here\n```\n"),
block_test.go:			data:            []byte("```"),
block_test.go:			wantMarker:      "```",
block_test.go:			data:            []byte("```"),
block_test.go:			wantMarker:      "```",
block_test.go:			data:            []byte("``` go"),
block_test.go:			wantMarker:      "```",
block_test.go:			data:            []byte("``` go foo bar"),
block_test.go:			wantMarker:      "```",
block_test.go:			data:            []byte("``` go foo bar  "),
block_test.go:			wantMarker:      "```",
block_test.go:		end, marker := isFenceLine(test.data, info, "```", test.newlineOptional)
block_test.go:	input := `# 标题
block_test.go:`
block_test.go:	result := `<h1>标题</h1>
block_test.go:`
html.go:	htmlEntity = regexp.MustCompile(`&[a-z]{2,5};`)
html.go:		renderParameters.FootnoteReturnLinkContents = `<sup>[return]</sup>`
html.go:	out.WriteString(`<li id="`)
html.go:	out.WriteString(`fn:`)
html.go:	out.WriteString(`">`)
html.go:		out.WriteString(` <a class="footnote-return" href="#`)
html.go:		out.WriteString(`fnref:`)
html.go:		out.WriteString(`">`)
html.go:		out.WriteString(`</a>`)
html.go:	// an actual URI, e.g. `mailto:foo@bar.com`, we don't
html.go:	// want to print the `mailto:` prefix
html.go:	out.WriteString(`<sup class="footnote-ref" id="`)
html.go:	out.WriteString(`fnref:`)
html.go:	out.WriteString(`"><a href="#`)
html.go:	out.WriteString(`fn:`)
html.go:	out.WriteString(`">`)
html.go:	out.WriteString(`</a></sup>`)
html.go:		case html[i] == '`':
inline.go:	urlRe    = `((https?|ftp):\/\/|\/)[-A-Za-z0-9+&@#\/%?=~_|!:,.;\(\)]+`
inline.go:	anchorRe = regexp.MustCompile(`^(<a\shref="` + urlRe + `"(\stitle="[^"<>]+")?\s?>` + urlRe + `<\/a>)`)
inline.go:	for nb < len(data) && data[nb] == '`' {
inline.go:		if data[end] == '`' {
inline.go:var escapeChars = []byte("\\`*_{}[]()#+-.!:|&<>~")
inline.go:		for i < len(data) && data[i] != c && data[i] != '`' && data[i] != '[' {
inline.go:		if data[i] == '`' {
inline.go:			for i < len(data) && data[i] != '`' {
inline_test.go:	anchorRe := regexp.MustCompile(`<a href="/(.*?)"`)
inline_test.go:	imgRe := regexp.MustCompile(`<img src="/(.*?)"`)
inline_test.go:			test = anchorRe.ReplaceAllString(test, `<a href="`+prefix+`/$1"`)
inline_test.go:			test = imgRe.ReplaceAllString(test, `<img src="`+prefix+`/$1"`)
inline_test.go:		"**`/usr`** : this folder is named `usr`\n",
inline_test.go:		"**`/usr`** :\n\n this folder is named `usr`\n",
inline_test.go:		"`source code`\n",
inline_test.go:		"` source code with spaces `\n",
inline_test.go:		"` source code with spaces `not here\n",
inline_test.go:		"a `single marker\n",
inline_test.go:		"<p>a `single marker</p>\n",
inline_test.go:		"a single multi-tick marker with ``` no text\n",
inline_test.go:		"<p>a single multi-tick marker with ``` no text</p>\n",
inline_test.go:		"markers with ` ` a space\n",
inline_test.go:		"`source code` and a `stray\n",
inline_test.go:		"<p><code>source code</code> and a `stray</p>\n",
inline_test.go:		"`source *with* _awkward characters_ in it`\n",
inline_test.go:		"`split over\ntwo lines`\n",
inline_test.go:		"```multiple ticks``` for the marker\n",
inline_test.go:		"```multiple ticks `with` ticks inside```\n",
inline_test.go:		"<p><code>multiple ticks `with` ticks inside</code></p>\n",
inline_test.go:	`<p>testing footnotes.<sup class="footnote-ref" id="fnref:a"><a href="#fn:a">1</a></sup></p>
inline_test.go:`,
inline_test.go:	`testing long[^b] notes.
inline_test.go:	` + "```\n\tsome code\n\t```" + `
inline_test.go:`,
inline_test.go:	`<p>testing long<sup class="footnote-ref" id="fnref:b"><a href="#fn:b">1</a></sup> notes.</p>
inline_test.go:`,
inline_test.go:	`testing[^c] multiple[^d] notes.
inline_test.go:`,
inline_test.go:	`<p>testing<sup class="footnote-ref" id="fnref:c"><a href="#fn:c">1</a></sup> multiple<sup class="footnote-ref" id="fnref:d"><a href="#fn:d">2</a></sup> notes.</p>
inline_test.go:`,
inline_test.go:	`<p>testing inline<sup class="footnote-ref" id="fnref:this-is-the-note"><a href="#fn:this-is-the-note">1</a></sup> notes.</p>
inline_test.go:`,
inline_test.go:	`<p>testing multiple<sup class="footnote-ref" id="fnref:1"><a href="#fn:1">1</a></sup> types<sup class="footnote-ref" id="fnref:inline-note"><a href="#fn:inline-note">2</a></sup> of notes<sup class="footnote-ref" id="fnref:2"><a href="#fn:2">3</a></sup></p>
inline_test.go:`,
inline_test.go:	`This is a footnote[^1]^[and this is an inline footnote]
inline_test.go:`,
inline_test.go:	`<p>This is a footnote<sup class="footnote-ref" id="fnref:1"><a href="#fn:1">1</a></sup><sup class="footnote-ref" id="fnref:and-this-is-an-i"><a href="#fn:and-this-is-an-i">2</a></sup></p>
inline_test.go:`,
inline_test.go:	`Bla bla [^1] [WWW][w3]
inline_test.go:`,
inline_test.go:	`<p>Bla bla <sup class="footnote-ref" id="fnref:1"><a href="#fn:1">1</a></sup> <a href="http://www.w3.org/">WWW</a></p>
inline_test.go:`,
inline_test.go:	`This is exciting![^fn1]
inline_test.go:`,
inline_test.go:	`<p>This is exciting!<sup class="footnote-ref" id="fnref:fn1"><a href="#fn:fn1">1</a></sup></p>
inline_test.go:`,
inline_test.go:	`testing footnotes.[^a]
inline_test.go:`,
inline_test.go:	`<p>testing footnotes.<sup class="footnote-ref" id="fnref:a"><a href="#fn:a">1</a></sup></p>
inline_test.go:`,
inline_test.go:	re := regexp.MustCompile(`(?ms)<li id="fn:(\S+?)">(.*?)</li>`)
inline_test.go:			test = re.ReplaceAllString(test, `<li id="fn:$1">$2 <a class="footnote-return" href="#fnref:$1">ret</a></li>`)
inline_test.go:		`Paragraph.[^fn1]
inline_test.go:  Obelisk`,
inline_test.go:		`<p>Paragraph.<sup class="footnote-ref" id="fnref:fn1"><a href="#fn:fn1">1</a></sup></p>
inline_test.go:`,
inline_test.go:		`This uses footnote A.[^A]
inline_test.go:`,
inline_test.go:		`<p>This uses footnote A.<sup class="footnote-ref" id="fnref:A"><a href="#fn:A">1</a></sup></p>
inline_test.go:`,
markdown.go:	p.inlineCallback['`'] = codeSpan
markdown.go:	for _, r := range []byte("!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~") {
README.md:will download, compile, and install the package into your `$GOPATH` directory
README.md:Currently maintained and recommended version of Blackfriday is `v2`. It's being
README.md:It is `go get`-able via [gopkg.in][6] at `gopkg.in/russross/blackfriday.v2`,
README.md:should import `github.com/russross/blackfriday` and specify that you're using
README.md:* A separate call to [`Parse`][4], which produces an abstract syntax tree for
README.md:If you are still interested in the legacy `v1`, you can import it from
README.md:`github.com/russross/blackfriday`. Documentation for the legacy v1 can be found
README.md:### Known issue with `dep`
README.md:There is a known problem with using Blackfriday v1 _transitively_ and `dep`.
README.md:Currently `dep` prioritizes semver versions over anything else, and picks the
README.md:latest one, plus it does not apply a `[[constraint]]` specifier to transitively
README.md:that something does not use `dep` yet, you will get Blackfriday v2 pulled in and
README.md:Meanwhile, `dep` team is working on a more general solution to the constraints
README.md:```go
README.md:```
README.md:```go
README.md:```
README.md:```go
README.md:```
README.md:call the more general `Markdown` function. For examples, see the
README.md:implementations of `MarkdownBasic` and `MarkdownCommon` in
README.md:`markdown.go`.
README.md:If you want to customize the set of options, use `blackfriday.WithExtensions`,
README.md:`blackfriday.WithRenderer` and `blackfriday.WithRefOverride`.
README.md:### `blackfriday-tool`
README.md:You can also check out `blackfriday-tool` for a more complete example
README.md:`blackfriday-tool` will be sufficient to download and install
README.md:installed in `$GOPATH/bin`.  This is a statically-linked binary that
README.md:anchors for headings when `EXTENSION_AUTO_HEADER_IDS` is enabled. The
README.md:[`SanitizedAnchorName`](https://godoc.org/github.com/russross/blackfriday#SanitizedAnchorName) exposes this functionality, and can be used to
README.md:[`github.com/shurcooL/sanitized_anchor_name`](https://godoc.org/github.com/shurcooL/sanitized_anchor_name). It can be useful for clients
README.md:    the `--tidy` option.  Without `--tidy`, the differences are
README.md:*   **Intra-word emphasis supression**. The `_` character is
README.md:    ```
README.md:    ```
README.md:        ``` go
README.md:        ```
README.md:    ``` go
README.md:    ```
README.md:*   **Strikethrough**. Use two tildes (`~~`) to mark text that
README.md:    default in the `MarkdownBasic` and `MarkdownCommon` convenience
README.md:*   **LaTeX-style dash parsing** is an additional option, where `--`
README.md:    is translated into `&ndash;`, and `---` is translated into
README.md:    `&mdash;`. This differs from most smartypants processors, which
README.md:    cases like most smartypant processors). For example, `4/5`
README.md:    becomes `<sup>4</sup>&frasl;<sub>5</sub>`, which renders as
smartypants.go:	if len(text) >= 2 && text[1] == '`' {
smartypants.go:	r['`'] = smartBacktick
testdata/Auto links.text:Auto-links should not occur here: `<http://example.com/>`
testdata/Backslash escapes.html:<p>Backtick: `</p>
testdata/Backslash escapes.html:Backtick: \`
testdata/Backslash escapes.html:<p>Backtick: <code>\`</code></p>
testdata/Backslash escapes.html:<p>`backticks`</p>
testdata/Backslash escapes.html:<p>This is a code span with a literal backslash-backtick sequence: <code>\`</code></p>
testdata/Backslash escapes.html:<p>This is a tag with unescaped backticks <span attr='`ticks`'>bar</span>.</p>
testdata/Backslash escapes.text:Backtick: \`
testdata/Backslash escapes.text:	Backtick: \`
testdata/Backslash escapes.text:Backslash: `\\`
testdata/Backslash escapes.text:Backtick: `` \` ``
testdata/Backslash escapes.text:Asterisk: `\*`
testdata/Backslash escapes.text:Underscore: `\_`
testdata/Backslash escapes.text:Left brace: `\{`
testdata/Backslash escapes.text:Right brace: `\}`
testdata/Backslash escapes.text:Left bracket: `\[`
testdata/Backslash escapes.text:Right bracket: `\]`
testdata/Backslash escapes.text:Left paren: `\(`
testdata/Backslash escapes.text:Right paren: `\)`
testdata/Backslash escapes.text:Greater-than: `\>`
testdata/Backslash escapes.text:Hash: `\#`
testdata/Backslash escapes.text:Period: `\.`
testdata/Backslash escapes.text:Bang: `\!`
testdata/Backslash escapes.text:Plus: `\+`
testdata/Backslash escapes.text:Minus: `\-`
testdata/Backslash escapes.text:Tilde: `\~`
testdata/Backslash escapes.text:\`backticks\`
testdata/Backslash escapes.text:This is a code span with a literal backslash-backtick sequence: `` \` ``
testdata/Backslash escapes.text:This is a tag with unescaped backticks <span attr='`ticks`'>bar</span>.
testdata/Code Spans.html:<p>Fix for backticks within HTML tag: <span attr='`ticks`'>like this</span></p>
testdata/Code Spans.html:<p>Here's how you put <code>`backticks`</code> in a code span.</p>
testdata/Code Spans.text:`<test a="` content of attribute `">`
testdata/Code Spans.text:Fix for backticks within HTML tag: <span attr='`ticks`'>like this</span>
testdata/Code Spans.text:Here's how you put `` `backticks` `` in a code span.
testdata/Markdown Documentation - Basics.html:<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.
testdata/Markdown Documentation - Basics.html:I wish SmartyPants used named entities like `&amp;mdash;`
testdata/Markdown Documentation - Basics.html:instead of decimal-encoded entites like `&amp;#8212;`.
testdata/Markdown Documentation - Basics.text:Setext-style headers for `<h1>` and `<h2>` are created by
testdata/Markdown Documentation - Basics.text:"underlining" with equal signs (`=`) and hyphens (`-`), respectively.
testdata/Markdown Documentation - Basics.text:To create an atx-style header, you put 1-6 hash marks (`#`) at the
testdata/Markdown Documentation - Basics.text:Blockquotes are indicated using email-style '`>`' angle brackets.
testdata/Markdown Documentation - Basics.text:Unordered (bulleted) lists use asterisks, pluses, and hyphens (`*`,
testdata/Markdown Documentation - Basics.text:`+`, and `-`) as list markers. These three markers are
testdata/Markdown Documentation - Basics.text:If you put blank lines between items, you'll get `<p>` tags for the
testdata/Markdown Documentation - Basics.text:backtick quotes. Any ampersands (`&`) and angle brackets (`<` or
testdata/Markdown Documentation - Basics.text:`>`) will automatically be translated into HTML entities. This makes
testdata/Markdown Documentation - Basics.text:    I strongly recommend against using any `<blink>` tags.
testdata/Markdown Documentation - Basics.text:    I wish SmartyPants used named entities like `&mdash;`
testdata/Markdown Documentation - Basics.text:    instead of decimal-encoded entites like `&#8212;`.
testdata/Markdown Documentation - Basics.text:the block by 4 spaces or 1 tab. Just like with code spans, `&`, `<`,
testdata/Markdown Documentation - Basics.text:and `>` characters will be escaped automatically.
testdata/Markdown Documentation - Syntax.html:<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>).
testdata/Markdown Documentation - Syntax.html:<pre><code>Use the `printf()` function.
testdata/Markdown Documentation - Syntax.html:<pre><code>``There is a literal backtick (`) here.``
testdata/Markdown Documentation - Syntax.html:<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
testdata/Markdown Documentation - Syntax.html:<pre><code>A single backtick in a code span: `` ` ``
testdata/Markdown Documentation - Syntax.html:A backtick-delimited string in a code span: `` `foo` ``
testdata/Markdown Documentation - Syntax.html:<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;
testdata/Markdown Documentation - Syntax.html:&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
testdata/Markdown Documentation - Syntax.html:<pre><code>Please don't use any `&lt;blink&gt;` tags.
testdata/Markdown Documentation - Syntax.html:<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
testdata/Markdown Documentation - Syntax.html:`   backtick
testdata/Markdown Documentation - Syntax.text:The only restrictions are that block-level HTML elements -- e.g. `<div>`,
testdata/Markdown Documentation - Syntax.text:`<table>`, `<pre>`, `<p>`, etc. -- must be separated from surrounding
testdata/Markdown Documentation - Syntax.text:to add extra (unwanted) `<p>` tags around HTML block-level tags.
testdata/Markdown Documentation - Syntax.text:HTML tags. E.g., you can't use Markdown-style `*emphasis*` inside an
testdata/Markdown Documentation - Syntax.text:Span-level HTML tags -- e.g. `<span>`, `<cite>`, or `<del>` -- can be
testdata/Markdown Documentation - Syntax.text:you'd prefer to use HTML `<a>` or `<img>` tags instead of Markdown's
testdata/Markdown Documentation - Syntax.text:In HTML, there are two characters that demand special treatment: `<`
testdata/Markdown Documentation - Syntax.text:and `&`. Left angle brackets are used to start tags; ampersands are
testdata/Markdown Documentation - Syntax.text:characters, you must escape them as entities, e.g. `&lt;`, and
testdata/Markdown Documentation - Syntax.text:`&amp;`.
testdata/Markdown Documentation - Syntax.text:write about 'AT&T', you need to write '`AT&amp;T`'. You even need to
testdata/Markdown Documentation - Syntax.text:in your anchor tag `href` attribute. Needless to say, this is easy to
testdata/Markdown Documentation - Syntax.text:into `&amp;`.
testdata/Markdown Documentation - Syntax.text:terrible format for writing about HTML syntax, because every single `<`
testdata/Markdown Documentation - Syntax.text:and `&` in your example code needs to be escaped.)
testdata/Markdown Documentation - Syntax.text:character in a paragraph into a `<br />` tag.
testdata/Markdown Documentation - Syntax.text:When you *do* want to insert a `<br />` break tag using Markdown, you
testdata/Markdown Documentation - Syntax.text:Yes, this takes a tad more effort to create a `<br />`, but a simplistic
testdata/Markdown Documentation - Syntax.text:"every line break is a `<br />`" rule wouldn't work for Markdown.
testdata/Markdown Documentation - Syntax.text:Any number of underlining `=`'s or `-`'s will work.
testdata/Markdown Documentation - Syntax.text:Markdown uses email-style `>` characters for blockquoting. If you're
testdata/Markdown Documentation - Syntax.text:wrap the text and put a `>` before every line:
testdata/Markdown Documentation - Syntax.text:Markdown allows you to be lazy and only put the `>` before the first
testdata/Markdown Documentation - Syntax.text:adding additional levels of `>`:
testdata/Markdown Documentation - Syntax.text:items in `<p>` tags in the HTML output. For example, this input:
testdata/Markdown Documentation - Syntax.text:To put a blockquote within a list item, the blockquote's `>`
testdata/Markdown Documentation - Syntax.text:in both `<pre>` and `<code>` tags.
testdata/Markdown Documentation - Syntax.text:Within a code block, ampersands (`&`) and angle brackets (`<` and `>`)
testdata/Markdown Documentation - Syntax.text:You can produce a horizontal rule tag (`<hr />`) by placing three or
testdata/Markdown Documentation - Syntax.text:Markdown treats asterisks (`*`) and underscores (`_`) as indicators of
testdata/Markdown Documentation - Syntax.text:emphasis. Text wrapped with one `*` or `_` will be wrapped with an
testdata/Markdown Documentation - Syntax.text:HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML
testdata/Markdown Documentation - Syntax.text:`<strong>` tag. E.g., this input:
testdata/Markdown Documentation - Syntax.text:But if you surround an `*` or `_` with spaces, it'll be treated as a
testdata/Markdown Documentation - Syntax.text:To indicate a span of code, wrap it with backtick quotes (`` ` ``).
testdata/Markdown Documentation - Syntax.text:    Use the `printf()` function.
testdata/Markdown Documentation - Syntax.text:    ``There is a literal backtick (`) here.``
testdata/Markdown Documentation - Syntax.text:    <p><code>There is a literal backtick (`) here.</code></p>
testdata/Markdown Documentation - Syntax.text:	A single backtick in a code span: `` ` ``
testdata/Markdown Documentation - Syntax.text:	A backtick-delimited string in a code span: `` `foo` ``
testdata/Markdown Documentation - Syntax.text:	<p>A single backtick in a code span: <code>`</code></p>
testdata/Markdown Documentation - Syntax.text:	<p>A backtick-delimited string in a code span: <code>`foo`</code></p>
testdata/Markdown Documentation - Syntax.text:    Please don't use any `<blink>` tags.
testdata/Markdown Documentation - Syntax.text:    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.
testdata/Markdown Documentation - Syntax.text:*   An exclamation mark: `!`;
testdata/Markdown Documentation - Syntax.text:*   followed by a set of square brackets, containing the `alt`
testdata/Markdown Documentation - Syntax.text:    the image, and an optional `title` attribute enclosed in double
testdata/Markdown Documentation - Syntax.text:use regular HTML `<img>` tags.
testdata/Markdown Documentation - Syntax.text:literal asterisks (instead of an HTML `<em>` tag), you can backslashes
testdata/Markdown Documentation - Syntax.text:    `   backtick
